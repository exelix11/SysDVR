<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<Platforms>AnyCPU</Platforms>
		<AssemblyName>SysDVR-Client</AssemblyName>
		<Description>https://github.com/exelix11/SysDVR</Description>
		<Authors>exelix</Authors>
		<Company />
		<PackageProjectUrl>https://github.com/exelix11/SysDVR</PackageProjectUrl>
		<RepositoryUrl>https://github.com/exelix11/SysDVR</RepositoryUrl>
		<Version>6.1.1</Version>
		<RootNamespace>SysDVR.Client</RootNamespace>
		<AssemblyVersion>6.1.1</AssemblyVersion>
		<FileVersion>6.1.1</FileVersion>
		<Configurations>Debug;Release</Configurations>
		<ApplicationIcon>Client.ico</ApplicationIcon>
		<RollForward>Major</RollForward>
		<PublishAot>true</PublishAot>
		<Nullable>annotations</Nullable>
	</PropertyGroup>

	<Choose>
		<!--Android and macos builds use dotnet 8 preview-->
		<When Condition="$(SysDvrTarget)=='android'">
			<PropertyGroup>
				<TargetFramework>net8.0</TargetFramework>
				<DefineConstants>$(DefineConstants);ANDROID_LIB</DefineConstants>
				<PublishAotUsingRuntimePack>true</PublishAotUsingRuntimePack>
			</PropertyGroup>
			<ItemGroup>
				<!--Android needs a proper soname property or it will refuse to load the library-->
				<LinkerArg Include="-Wl,-soname,SysDVR-Client.so" />
			</ItemGroup>
		</When>

		<!--As of now the only difference is android, instead of using specific conditions we can just use an Otherwise block-->
		<!--<When Condition="$(SysDvrTarget)=='macos'">-->
		<!--<When Condition="$(SysDvrTarget)=='linux'">-->
		<!--<When Condition="$(SysDvrTarget)=='windows'">-->
		<Otherwise>
			<PropertyGroup>
				<OutputType>Exe</OutputType>
				<TargetFramework>net8.0</TargetFramework>
			</PropertyGroup>
		</Otherwise>
	</Choose>
	
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<Optimize>false</Optimize>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<DebugType>none</DebugType>
		<DebugSymbols>false</DebugSymbols>
	</PropertyGroup>

	<PropertyGroup>
		<!--<DefineConstants>$(DefineConstants);ANDROID_LIB</DefineConstants>-->
		<DefineConstants>$(DefineConstants);NETSTANDARD2_1_OR_GREATER;NETSTANDARD2;NETSTANDARD2_0;NETSTANDARD2_1</DefineConstants>
	</PropertyGroup>

	<ItemGroup>
		<ContentWithTargetPath Include="$(ProjectDir)\Platform\Resources\**">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<TargetPath>runtimes\%(RecursiveDir)\%(Filename)%(Extension)</TargetPath>
		</ContentWithTargetPath>
		<Compile Remove="Platform\Android\**" />
		<Compile Remove="Platform\Linux\**" />
		<EmbeddedResource Remove="Platform\Android\**" />
		<EmbeddedResource Remove="Platform\Linux\**" />
		<None Remove="Platform\Android\**" />
		<None Remove="Platform\Linux\**" />
	</ItemGroup>

	<ItemGroup>
	  <PackageReference Include="System.Text.Json" Version="7.0.3" />
	</ItemGroup>

	<!-- The following tasks are used to stamp the git commit hash into the binary -->
	<PropertyGroup>
		<!-- Default value in case git is not installed -->
		<GitCommitHash>unknown</GitCommitHash>
	</PropertyGroup>
	
	<Target Name="CreateGitAttributeFile" BeforeTargets="CoreCompile">
		<!-- Try to run git and get the commit hash -->
		<Exec Command="git rev-parse --short HEAD" ConsoleToMSBuild="True" IgnoreExitCode="True">
			<Output TaskParameter="ExitCode" PropertyName="GitTaskExitCode" />
			<Output Condition="'$(GitTaskExitCode)'=='0'" PropertyName="GitCommitHash" TaskParameter="ConsoleOutput" />
		</Exec>
		<!-- names the obj/.../CustomAssemblyInfo.cs file -->
		<PropertyGroup>
			<CustomAssemblyInfoFile>$(IntermediateOutputPath)CustomAssemblyInfo.cs</CustomAssemblyInfoFile>
		</PropertyGroup>
		<!-- includes the CustomAssemblyInfo for compilation into your project -->
		<ItemGroup>
			<Compile Include="$(CustomAssemblyInfoFile)" />
		</ItemGroup>
		<!-- defines the AssemblyMetadata attribute that will be written -->
		<ItemGroup>
			<AssemblyAttributes Include="AssemblyMetadata">
				<_Parameter1>BuildCommit</_Parameter1>
				<_Parameter2>$(GitCommitHash)</_Parameter2>
			</AssemblyAttributes>
		</ItemGroup>
		<!-- writes the attribute to the customAssemblyInfo file -->
		<WriteCodeFragment Language="C#" OutputFile="$(CustomAssemblyInfoFile)" AssemblyAttributes="@(AssemblyAttributes)" />
	</Target>
</Project>
